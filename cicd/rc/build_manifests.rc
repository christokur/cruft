#!/usr/bin/env bash

#set -x
set +o errexit
[ -z "$GITHUB_ACTION" ] || set -o nounset

function xtrace_debugging_on() {
    reset_stdout
    echo "$1"
    export _xtrace=$(shopt -o xtrace >/dev/null; echo $?)
    set -x
    export xtrace=0
    export CI_VERBOSE=1
}

function xtrace_debugging_off() {
    export CI_VERBOSE=''
    export xtrace=${_xtrace:-1}
    test 0 -ne $xtrace && set +x
    export xtrace=1
    unset _xtrace
    if test ! -z "$1" ; then
        redirect_stdout $1
    fi
}

export xtrace=$(
	shopt                -o xtrace > /dev/null
	echo $?
)                                                    || true
export errexit=$(
	shopt                 -o errexit > /dev/null
	echo $?
)                                                      || true
export GITHUB_WORKSPACE=${GITHUB_WORKSPACE:-$PWD}

[ type update_deployments 2>/dev/null ] || . $GITHUB_WORKSPACE/cicd/rc/update_deployments.rc


function chdir() {
    local dir=$1
    test 0 -ne $xtrace && set +x
    cd $dir
    test 0 -eq $xtrace && set -x
}

function build_manifests() {
    if [ ! -z "$MANIFESTS_PATHS" ] ; then
        prepare

        chdir $GITHUB_WORKSPACE
        mkdir -p site 2>/dev/null || true

        setup_b2b

        #[ type setup_git_config 2>/dev/null ] || . $GITHUB_WORKSPACE/cicd/rc/setup_github_actions_git.rc
        #setup_git_config
        #chdir $GITHUB_WORKSPACE

        echo "=================================================="
        echo "+ Process manifests: $MANIFESTS_PATHS"
        echo "=================================================="
        ERRORS=""
        echo MANIFESTS_PATHS=$MANIFESTS_PATHS
        MANIFESTS_PATHS=$(for mp in $MANIFESTS_PATHS ; do dirname $mp ; done | sort | uniq)
        echo MANIFESTS_PATHS=$MANIFESTS_PATHS
        for MANIFEST_PATH in $MANIFESTS_PATHS ; do
            cd $GITHUB_WORKSPACE
            if [ -d "$MANIFEST_PATH" ] ; then
                echo "++++++++++++++++++++++++++++++++++++++++++++++++++"
                echo "++ $MANIFEST_PATH"
                echo "++++++++++++++++++++++++++++++++++++++++++++++++++"
                MANIFEST_NAME=$(basename $MANIFEST_PATH)
                echo "++ MANIFEST_NAME: $MANIFEST_NAME"

                echo "++ Building $MANIFEST_NAME from $MANIFEST_PATH"
                yq -P $MANIFEST_PATH/manifest.yaml
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: manifest template failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                    continue
                }
                yq .metadata.version $MANIFEST_PATH/manifest.yaml
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: manifest template failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                    continue
                }
                # This set's up Poetry to package the wheels
                python bin/template-expander.py -s templates/manifest:templates -c templates/manifest \
                  -d $MANIFEST_PATH/manifest.yaml -t site --overwrite
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: manifest Poetry template failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                    continue
                }
                # Copy the actual manifest files
                for f in manifest.yaml README.md ; do
                    cp $MANIFEST_PATH/$f site/$MANIFEST_NAME/$f
                done
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: copy manifest files failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                    continue
                }
                cd site/$MANIFEST_NAME
                ls -alR
                poetry build
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: poetry build failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                    continue
                }
                poetry publish -r manifests
                RC=$?
                [ $RC -eq 0 ] || {
                    echo "ERROR: poetry publish failed with RC=$RC";
                    ERRORS="$ERRORS $MANIFEST_PATH";
                }
                echo "--------------------------------------------------"
                echo "-- Done $MANIFEST_PATH"
                echo "--------------------------------------------------"
            else
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              echo "WARNING: $MANIFEST_PATH does not exist. Skipping ..."
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            fi
            if [ ! -z "$ERRORS" ] ; then
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              echo "!!! ERROR: ${ERRORS} deployments failed"
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              exit 2
            fi
        done
    else
        echo "No config changes! Skipping manifests ..."
    fi
    echo "=================================================="
    echo "                      Done!"
    echo "=================================================="
}

name: Build, Test and Publish

on:
  push:
    branches: [ "v2" ]
#  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-publish:
    strategy:
      matrix:
        # Put the version we consider mainline and publish with last
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CI_AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      CI_AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION_TOOLS: "us-east-2"
      AWS_ACCOUNT_TOOLS: "433714148419"
      PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      id: setup_python
      with:
        python-version: ${{ matrix.python-version }}
        #cache: poetry

    - name: Install poetry
      run: |
        echo python-path:'${{ steps.setup_python.outputs.python-path }}'
        ${{ steps.setup_python.outputs.python-path }} --version
        ${{ steps.setup_python.outputs.python-path }} -m pip install poetry==1.5.1
      shell: bash

    - name: Self-Configure AWS Credentials
      continue-on-error: false
      run: |
        set +e
        [ type aws_configure_profile 2>/dev/null ] || . $GITHUB_WORKSPACE/cicd/rc/configure_aws_credentials.rc
        aws_check_environment_secrets

        export AWS_PROFILE=default
        export AWS_ACCOUNT_ID=${AWS_ACCOUNT_TOOLS:-$AWS_ACCOUNT_ID}
        aws_configure_profile
        RC=$?
        #echo RC=$RC
        [ 0 -ne $RC ] && exit $RC

        export AWS_PROFILE=b2b-master
        export AWS_ACCOUNT_ID=048648088468
        aws_configure_profile
        RC=$?
        #echo RC=$RC
        [ 0 -ne $RC ] && exit $RC
        export AWS_PROFILE=cloud-services-prod
        unset AWS_ACCOUNT_ID # default to TOOLS
        aws_configure_profile
        RC=$?
        #echo RC=$RC
        [ 0 -ne $RC ] && exit $RC

        aws_check_profiles_and_accounts "cloud-services-prod:433714148419"
      shell: bash

    - name: Set up access to CodeArtifact
      run: |
        [ type aws_setup_codeartifact_access 2>/dev/null ] || . $GITHUB_WORKSPACE/cicd/rc/configure_aws_codeartifact.rc
        export AWS_PROFILE_TOOLS=cloud-services-prod
        aws_setup_codeartifact_access
      shell: bash

    - name: Install dependencies and build
      run: |
        pip list
        python -m pip install build
        python -m build --sdist --wheel --outdir dist/ .
      shell: bash
        
    - name: Publish
      if: matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest'
      run: |
        pip install wheel twine
        cat ~/.pypirc
        #export TWINE_USERNAME=aws
        #export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain artifacts --domain-owner $AWS_ACCOUNT_TOOLS --query authorizationToken --output text --profile=cloud-services-prod`
        #export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain artifacts --domain-owner $AWS_ACCOUNT_TOOLS --repository pypi --format pypi --query repositoryEndpoint --output text --profile=cloud-services-prod`
        #set | grep TWINE
        for whl in dist/*.whl; do
          #twine upload --repository-url $TWINE_REPOSITORY_URL -u $TWINE_USERNAME -p $TWINE_PASSWORD --verbose $whl
          twine upload --verbose --repository codeartifact $whl 
        done
      shell: bash
